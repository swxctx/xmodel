// Code generated by go-bindata.
// sources:
// .gitignore
// __model__gen__.lock
// DO NOT EDIT!

package tpl

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"os"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _Gitignore = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x8e\x4f\x4b\xc4\x30\x10\xc5\xef\xef\xa3\x0c\x38\xa0\xa0\x78\xf5\xe0\x45\xf0\x0f\x5e\x45\x42\x9b\x4e\x63\xd7\x6d\x67\x4c\xd2\xb5\xee\x52\x3f\xbb\xc4\x54\xf0\xf2\x92\xf7\x63\xf8\xcd\x10\x2b\x88\x1b\x10\x27\x85\xd3\x76\x07\x97\x25\x65\x10\xbf\x5c\x5e\x5d\x1f\x3e\x5e\xb1\xbd\xac\x73\xa1\x3e\xe8\x39\x07\xad\xbf\x0b\xf6\x70\x3e\xa8\xeb\xa4\x9f\xa7\xbf\x12\x34\x7f\x99\xa4\x32\xf5\xdb\x65\x31\x8d\x99\xa9\x9a\xc7\x66\x98\xaa\x40\x16\xa9\xf9\x0d\xe2\x6d\xa9\x45\xed\x41\x1c\x9b\x08\xe2\xe3\x60\x20\x0e\xc7\xc2\x53\x07\xe2\x76\x2c\xe9\xfb\x50\x88\xe5\x05\xc4\x7b\x0d\xa0\x49\xdf\x66\xdb\x0e\x3c\x24\xaf\x5d\x11\xa7\xb9\xdd\x0f\xa3\x9c\x59\xd4\x9d\xf8\xfc\x8f\x7c\x6a\x7c\x4f\xd6\x78\xc1\xe9\xf4\xf4\xfc\x78\xe7\x1e\x6e\xee\x6f\xd7\x15\x3f\x01\x00\x00\xff\xff\x78\x2c\x45\x8a\x0c\x01\x00\x00")

func GitignoreBytes() ([]byte, error) {
	return bindataRead(
		_Gitignore,
		".gitignore",
	)
}

func Gitignore() (*asset, error) {
	bytes, err := GitignoreBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: ".gitignore", size: 268, mode: os.FileMode(420), modTime: time.Unix(1571309527, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var ___model__gen__Lock = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x1c\xca\xc1\x0d\x82\x21\x0c\x06\xd0\xbb\x53\x7c\x32\x00\x03\x78\xf7\xaa\x17\x06\xc0\x40\x0b\x4d\xa0\x4d\x2c\x2a\x6e\x6f\xfc\xaf\x2f\xef\x76\x4f\xd7\xcb\x09\xa9\x8b\x23\xef\x69\x95\x06\x1a\x69\x46\xb1\x39\x1f\x5a\x61\x3a\xbe\x28\xf6\xa6\xa7\x83\x65\x90\xe3\x23\xab\x63\x75\x42\x88\x8d\x34\x36\x0b\xf0\x17\xb3\x6c\x08\x1f\xfe\x6f\xa0\x2d\xbe\xfc\xfc\x0b\x00\x00\xff\xff\x34\x24\x21\xb6\x60\x00\x00\x00")

func __model__gen__LockBytes() ([]byte, error) {
	return bindataRead(
		___model__gen__Lock,
		"__model__gen__.lock",
	)
}

func __model__gen__Lock() (*asset, error) {
	bytes, err := __model__gen__LockBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "__model__gen__.lock", size: 96, mode: os.FileMode(420), modTime: time.Unix(1591868844, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	".gitignore":          Gitignore,
	"__model__gen__.lock": __model__gen__Lock,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	".gitignore":          &bintree{Gitignore, map[string]*bintree{}},
	"__model__gen__.lock": &bintree{__model__gen__Lock, map[string]*bintree{}},
}}
